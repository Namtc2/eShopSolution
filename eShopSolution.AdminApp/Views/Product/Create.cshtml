@model eShopSolution.ViewModels.Catalog.Products.Manage.ProductCreateRequest

@{
    ViewData["Title"] = "Tạo mới sản phẩm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Scripts{
    <script src="~/ckeditor5-build-classic/ckeditor.js"></script>
    <script>
        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload. It sounds scary but do not
                // worry — the loader will be passed into the adapter later on in this guide.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }
            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open('POST', '@Url.Action("UploadImage","Product")', true);
                xhr.responseType = 'json';
            }
            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }
            // Prepares the data and sends the request.
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();

                data.append('upload', file);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Send the request.
                this.xhr.send(data);
            }
        }
        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }
       
        ClassicEditor
            .create(document.querySelector('#txt_details'), {
                // toolbar: [ 'heading', '|', 'bold', 'italic', 'link' ]
                extraPlugins: [MyCustomUploadAdapterPlugin],              
            })
            .then(editor => {
                window.editor = editor;
                editor.editing.view.change(writer => {
                    writer.setStyle('min-height', '200px', editor.editing.view.document.getRoot());
                });
            })
            .catch(err => {
                console.error(err.stack);
            });
    </script>
    
}

<main>
    <div class="container-fluid">
        <h1 class="mt-4">Tạo mới sản phẩm</h1>
        <ol class="breadcrumb mb-4">
            <li class="breadcrumb-item"><a href="index.html">Trang chủ</a></li>
            <li class="breadcrumb-item active">Tạo mới sản phẩm</li>
        </ol>
        <div class="card mb-4">
            <div class="card-header">
                <a asp-action="Index" asp-asp-controller="Product" class="btn btn-success">Về danh sách</a>
            </div>
            <div class="card-body justify-content-center col-md-12">
                <div class="container">
                    <form asp-action="Create" enctype="multipart/form-data" method="post">
                        <div class="row">
                            <div class="col-md-6">
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <div class="form-group">
                                    <label asp-for="Name" class="control-label"></label>
                                    <input asp-for="Name" class="form-control" />
                                    <span asp-validation-for="Name" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="OriginalPrice" type="number" class="control-label"></label>
                                    <input asp-for="OriginalPrice" class="form-control" />
                                    <span asp-validation-for="OriginalPrice" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="Price" class="control-label"></label>
                                    <input asp-for="Price" type="number" class="form-control" />
                                    <span asp-validation-for="Price" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="Stock" type="number" class="control-label"></label>
                                    <input asp-for="Stock" class="form-control" />
                                    <span asp-validation-for="Stock" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="Description" class="control-label"></label>
                                    <textarea asp-for="Description" rows="5" class="form-control"></textarea>
                                    <span asp-validation-for="Description" class="text-danger"></span>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="SeoDescription" class="control-label"></label>
                                    <input asp-for="SeoDescription" class="form-control" />
                                    <span asp-validation-for="SeoDescription" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="SeoTitle" class="control-label"></label>
                                    <input asp-for="SeoTitle" class="form-control" />
                                    <span asp-validation-for="SeoTitle" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="SeoAlias" class="control-label"></label>
                                    <input asp-for="SeoAlias" class="form-control" />
                                    <span asp-validation-for="SeoAlias" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="ThumbnailImage" class="control-label"></label>
                                    <input asp-for="ThumbnailImage" type="file" class="form-control" />
                                    <span asp-validation-for="ThumbnailImage" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label asp-for="Details" class="control-label"></label>
                                    <textarea id="txt_details" asp-for="Details" rows="5" class="form-control"></textarea>
                                    <span asp-validation-for="Details" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            @*<div class="form-group">*@
                                <div class="col-md-12 text-right">
                                    <input type="submit" value="Lưu" class="btn btn-primary" />
                                </div>
                            @*</div>*@
                        </div>
                    </form>
                </div>


            </div>
        </div>
    </div>
</main>


